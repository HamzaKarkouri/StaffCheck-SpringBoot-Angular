import { ChecksumException, FormatException, NotFoundException } from '@zxing/library';
import { BrowserMultiFormatReader } from '@zxing/browser';
import { BehaviorSubject } from 'rxjs';
/**
 * Based on zxing-typescript BrowserCodeReader
 */
export class BrowserMultiFormatContinuousReader extends BrowserMultiFormatReader {
    /**
     * Returns the code reader scanner controls.
     */
    getScannerControls() {
        if (!this.scannerControls) {
            throw new Error('No scanning is running at the time.');
        }
        return this.scannerControls;
    }
    /**
     * Starts the decoding from the current or a new video element.
     *
     * @param deviceId The device's to be used Id
     * @param previewEl A new video element
     */
    async scanFromDeviceObservable(deviceId, previewEl) {
        const scan$ = new BehaviorSubject({});
        let ctrls;
        try {
            ctrls = await this.decodeFromVideoDevice(deviceId, previewEl, (result, error) => {
                if (!error) {
                    scan$.next({ result });
                    return;
                }
                const errorName = error.name;
                // stream cannot stop on fails.
                if (
                // scan Failure - found nothing, no error
                errorName === NotFoundException.name ||
                    // scan Error - found the QR but got error on decoding
                    errorName === ChecksumException.name ||
                    errorName === FormatException.name ||
                    error.message.includes('No MultiFormat Readers were able to detect the code.')) {
                    scan$.next({ error });
                    return;
                }
                // probably fatal error
                scan$.error(error);
                this.scannerControls.stop();
                this.scannerControls = undefined;
                return;
            });
            this.scannerControls = {
                ...ctrls,
                stop() {
                    ctrls.stop();
                    scan$.complete();
                },
            };
        }
        catch (e) {
            scan$.error(e);
            this.scannerControls?.stop();
            this.scannerControls = undefined;
        }
        return scan$.asObservable();
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnJvd3Nlci1tdWx0aS1mb3JtYXQtY29udGludW91cy1yZWFkZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wcm9qZWN0cy96eGluZy1zY2FubmVyL3NyYy9saWIvYnJvd3Nlci1tdWx0aS1mb3JtYXQtY29udGludW91cy1yZWFkZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLGlCQUFpQixFQUFFLGVBQWUsRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ3ZGLE9BQU8sRUFBRSx3QkFBd0IsRUFBb0IsTUFBTSxnQkFBZ0IsQ0FBQztBQUM1RSxPQUFPLEVBQUUsZUFBZSxFQUFjLE1BQU0sTUFBTSxDQUFDO0FBR25EOztHQUVHO0FBQ0gsTUFBTSxPQUFPLGtDQUFtQyxTQUFRLHdCQUF3QjtJQVE5RTs7T0FFRztJQUNJLGtCQUFrQjtRQUN2QixJQUFJLENBQUMsSUFBSSxDQUFDLGVBQWUsRUFBRSxDQUFDO1lBQzFCLE1BQU0sSUFBSSxLQUFLLENBQUMscUNBQXFDLENBQUMsQ0FBQztRQUN6RCxDQUFDO1FBQ0QsT0FBTyxJQUFJLENBQUMsZUFBZSxDQUFDO0lBQzlCLENBQUM7SUFFRDs7Ozs7T0FLRztJQUNJLEtBQUssQ0FBQyx3QkFBd0IsQ0FDbkMsUUFBaUIsRUFDakIsU0FBNEI7UUFHNUIsTUFBTSxLQUFLLEdBQUcsSUFBSSxlQUFlLENBQWlCLEVBQUUsQ0FBQyxDQUFDO1FBQ3RELElBQUksS0FBSyxDQUFDO1FBRVYsSUFBSSxDQUFDO1lBQ0gsS0FBSyxHQUFHLE1BQU0sSUFBSSxDQUFDLHFCQUFxQixDQUFDLFFBQVEsRUFBRSxTQUFTLEVBQUUsQ0FBQyxNQUFNLEVBQUUsS0FBSyxFQUFFLEVBQUU7Z0JBRTlFLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQztvQkFDWCxLQUFLLENBQUMsSUFBSSxDQUFDLEVBQUUsTUFBTSxFQUFFLENBQUMsQ0FBQztvQkFDdkIsT0FBTztnQkFDVCxDQUFDO2dCQUVELE1BQU0sU0FBUyxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUM7Z0JBRTdCLCtCQUErQjtnQkFDL0I7Z0JBQ0UseUNBQXlDO2dCQUN6QyxTQUFTLEtBQUssaUJBQWlCLENBQUMsSUFBSTtvQkFDcEMsc0RBQXNEO29CQUN0RCxTQUFTLEtBQUssaUJBQWlCLENBQUMsSUFBSTtvQkFDcEMsU0FBUyxLQUFLLGVBQWUsQ0FBQyxJQUFJO29CQUNsQyxLQUFLLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxzREFBc0QsQ0FBQyxFQUM5RSxDQUFDO29CQUNELEtBQUssQ0FBQyxJQUFJLENBQUMsRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDO29CQUN0QixPQUFPO2dCQUNULENBQUM7Z0JBRUQsdUJBQXVCO2dCQUN2QixLQUFLLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO2dCQUNuQixJQUFJLENBQUMsZUFBZSxDQUFDLElBQUksRUFBRSxDQUFDO2dCQUM1QixJQUFJLENBQUMsZUFBZSxHQUFHLFNBQVMsQ0FBQztnQkFDakMsT0FBTztZQUNULENBQUMsQ0FBQyxDQUFDO1lBRUgsSUFBSSxDQUFDLGVBQWUsR0FBRztnQkFDckIsR0FBRyxLQUFLO2dCQUNSLElBQUk7b0JBQ0YsS0FBSyxDQUFDLElBQUksRUFBRSxDQUFDO29CQUNiLEtBQUssQ0FBQyxRQUFRLEVBQUUsQ0FBQztnQkFDbkIsQ0FBQzthQUNGLENBQUM7UUFDSixDQUFDO1FBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQztZQUNYLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDZixJQUFJLENBQUMsZUFBZSxFQUFFLElBQUksRUFBRSxDQUFDO1lBQzdCLElBQUksQ0FBQyxlQUFlLEdBQUcsU0FBUyxDQUFDO1FBQ25DLENBQUM7UUFFRCxPQUFPLEtBQUssQ0FBQyxZQUFZLEVBQUUsQ0FBQztJQUM5QixDQUFDO0NBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDaGVja3N1bUV4Y2VwdGlvbiwgRm9ybWF0RXhjZXB0aW9uLCBOb3RGb3VuZEV4Y2VwdGlvbiB9IGZyb20gJ0B6eGluZy9saWJyYXJ5JztcbmltcG9ydCB7IEJyb3dzZXJNdWx0aUZvcm1hdFJlYWRlciwgSVNjYW5uZXJDb250cm9scyB9IGZyb20gJ0B6eGluZy9icm93c2VyJztcbmltcG9ydCB7IEJlaGF2aW9yU3ViamVjdCwgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgUmVzdWx0QW5kRXJyb3IgfSBmcm9tICcuL1Jlc3VsdEFuZEVycm9yJztcblxuLyoqXG4gKiBCYXNlZCBvbiB6eGluZy10eXBlc2NyaXB0IEJyb3dzZXJDb2RlUmVhZGVyXG4gKi9cbmV4cG9ydCBjbGFzcyBCcm93c2VyTXVsdGlGb3JtYXRDb250aW51b3VzUmVhZGVyIGV4dGVuZHMgQnJvd3Nlck11bHRpRm9ybWF0UmVhZGVyIHtcblxuICAvKipcbiAgICogQWxsb3dzIHRvIGNhbGwgc2Nhbm5lciBjb250cm9scyBBUEkgd2hpbGUgc2Nhbm5pbmcuXG4gICAqIFdpbGwgYmUgdW5kZWZpbmVkIGlmIG5vIHNjYW5uaW5nIGlzIHJ1bm5pbmcuXG4gICAqL1xuICBwcm90ZWN0ZWQgc2Nhbm5lckNvbnRyb2xzOiBJU2Nhbm5lckNvbnRyb2xzO1xuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBjb2RlIHJlYWRlciBzY2FubmVyIGNvbnRyb2xzLlxuICAgKi9cbiAgcHVibGljIGdldFNjYW5uZXJDb250cm9scygpOiBJU2Nhbm5lckNvbnRyb2xzIHtcbiAgICBpZiAoIXRoaXMuc2Nhbm5lckNvbnRyb2xzKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ05vIHNjYW5uaW5nIGlzIHJ1bm5pbmcgYXQgdGhlIHRpbWUuJyk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLnNjYW5uZXJDb250cm9scztcbiAgfVxuXG4gIC8qKlxuICAgKiBTdGFydHMgdGhlIGRlY29kaW5nIGZyb20gdGhlIGN1cnJlbnQgb3IgYSBuZXcgdmlkZW8gZWxlbWVudC5cbiAgICpcbiAgICogQHBhcmFtIGRldmljZUlkIFRoZSBkZXZpY2UncyB0byBiZSB1c2VkIElkXG4gICAqIEBwYXJhbSBwcmV2aWV3RWwgQSBuZXcgdmlkZW8gZWxlbWVudFxuICAgKi9cbiAgcHVibGljIGFzeW5jIHNjYW5Gcm9tRGV2aWNlT2JzZXJ2YWJsZShcbiAgICBkZXZpY2VJZD86IHN0cmluZyxcbiAgICBwcmV2aWV3RWw/OiBIVE1MVmlkZW9FbGVtZW50XG4gICk6IFByb21pc2U8T2JzZXJ2YWJsZTxSZXN1bHRBbmRFcnJvcj4+IHtcblxuICAgIGNvbnN0IHNjYW4kID0gbmV3IEJlaGF2aW9yU3ViamVjdDxSZXN1bHRBbmRFcnJvcj4oe30pO1xuICAgIGxldCBjdHJscztcblxuICAgIHRyeSB7XG4gICAgICBjdHJscyA9IGF3YWl0IHRoaXMuZGVjb2RlRnJvbVZpZGVvRGV2aWNlKGRldmljZUlkLCBwcmV2aWV3RWwsIChyZXN1bHQsIGVycm9yKSA9PiB7XG5cbiAgICAgICAgaWYgKCFlcnJvcikge1xuICAgICAgICAgIHNjYW4kLm5leHQoeyByZXN1bHQgfSk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgZXJyb3JOYW1lID0gZXJyb3IubmFtZTtcblxuICAgICAgICAvLyBzdHJlYW0gY2Fubm90IHN0b3Agb24gZmFpbHMuXG4gICAgICAgIGlmIChcbiAgICAgICAgICAvLyBzY2FuIEZhaWx1cmUgLSBmb3VuZCBub3RoaW5nLCBubyBlcnJvclxuICAgICAgICAgIGVycm9yTmFtZSA9PT0gTm90Rm91bmRFeGNlcHRpb24ubmFtZSB8fFxuICAgICAgICAgIC8vIHNjYW4gRXJyb3IgLSBmb3VuZCB0aGUgUVIgYnV0IGdvdCBlcnJvciBvbiBkZWNvZGluZ1xuICAgICAgICAgIGVycm9yTmFtZSA9PT0gQ2hlY2tzdW1FeGNlcHRpb24ubmFtZSB8fFxuICAgICAgICAgIGVycm9yTmFtZSA9PT0gRm9ybWF0RXhjZXB0aW9uLm5hbWUgfHxcbiAgICAgICAgICBlcnJvci5tZXNzYWdlLmluY2x1ZGVzKCdObyBNdWx0aUZvcm1hdCBSZWFkZXJzIHdlcmUgYWJsZSB0byBkZXRlY3QgdGhlIGNvZGUuJylcbiAgICAgICAgKSB7XG4gICAgICAgICAgc2NhbiQubmV4dCh7IGVycm9yIH0pO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHByb2JhYmx5IGZhdGFsIGVycm9yXG4gICAgICAgIHNjYW4kLmVycm9yKGVycm9yKTtcbiAgICAgICAgdGhpcy5zY2FubmVyQ29udHJvbHMuc3RvcCgpO1xuICAgICAgICB0aGlzLnNjYW5uZXJDb250cm9scyA9IHVuZGVmaW5lZDtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfSk7XG5cbiAgICAgIHRoaXMuc2Nhbm5lckNvbnRyb2xzID0ge1xuICAgICAgICAuLi5jdHJscyxcbiAgICAgICAgc3RvcCgpIHtcbiAgICAgICAgICBjdHJscy5zdG9wKCk7XG4gICAgICAgICAgc2NhbiQuY29tcGxldGUoKTtcbiAgICAgICAgfSxcbiAgICAgIH07XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgc2NhbiQuZXJyb3IoZSk7XG4gICAgICB0aGlzLnNjYW5uZXJDb250cm9scz8uc3RvcCgpO1xuICAgICAgdGhpcy5zY2FubmVyQ29udHJvbHMgPSB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIHNjYW4kLmFzT2JzZXJ2YWJsZSgpO1xuICB9XG59XG4iXX0=